<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[KevinLu的博客]]></title>
  <subtitle><![CDATA[怕什么真理无穷,进一寸有一寸的欢喜]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.yinuolu.com//"/>
  <updated>2018-08-01T11:49:23.585Z</updated>
  <id>http://blog.yinuolu.com//</id>
  
  <author>
    <name><![CDATA[Kevin Lu]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[面试题-字符对检查]]></title>
    <link href="http://blog.yinuolu.com/2018/08/01/sample-data-structure-stacks/"/>
    <id>http://blog.yinuolu.com/2018/08/01/sample-data-structure-stacks/</id>
    <published>2018-08-01T11:33:35.000Z</published>
    <updated>2018-08-01T11:49:23.585Z</updated>
    <content type="html"><![CDATA[<h2 id="面试题：字符串中包含{}[]()三对字符串，当输入时错位或少输多输都为格式错位。比如：{[]}()格式正确，而{[}()]格式错误。">面试题：字符串中包含{}[]()三对字符串，当输入时错位或少输多输都为格式错位。比如：{[]}()格式正确，而{[}()]格式错误。</h2><blockquote>
<p>应用栈来检查，遇到左括号就入栈，遇到右括号就把栈顶的左括号出栈。当字符串扫描完毕后，如果栈内元素为空，则说明括号匹配无误。如果完毕后栈内还有元素，则说明左括号多了；如果进行出栈操作时，栈内已经是空的了，说明右括号多了或者右括号之前没有左括号</p>
</blockquote>
<a id="more"></a>
<h3 id="这里直接用NSMutableArray充当零时的Stacks容器-实现代码如下：">这里直接用NSMutableArray充当零时的Stacks容器.实现代码如下：</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>) checkPairString:(<span class="built_in">NSString</span> *) string &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i&lt;string.length ; i++) &#123;</span><br><span class="line">         <span class="keyword">char</span> str = [string characterAtIndex:i];</span><br><span class="line">        <span class="keyword">switch</span> (str) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'('</span>:</span><br><span class="line">                [<span class="keyword">self</span>.stackArray addObject:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%c"</span>,str]];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.stackArray.count &gt; <span class="number">0</span> &amp;&amp; [[<span class="keyword">self</span>.stackArray lastObject] isEqualToString:<span class="string">@"["</span>])&#123;</span><br><span class="line">                    [<span class="keyword">self</span>.stackArray removeLastObject];</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.stackArray.count &gt; <span class="number">0</span> &amp;&amp; [[<span class="keyword">self</span>.stackArray lastObject] isEqualToString:@ <span class="string">"&#123;"</span>])&#123;</span><br><span class="line">                    [<span class="keyword">self</span>.stackArray removeLastObject];</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">self</span>.stackArray.count &gt; <span class="number">0</span> &amp;&amp; [[<span class="keyword">self</span>.stackArray lastObject] isEqualToString:@ <span class="string">"("</span>])&#123;</span><br><span class="line">                    [<span class="keyword">self</span>.stackArray removeLastObject];</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.stackArray.count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试代码">测试代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOL bo1 = [<span class="string">self checkPairString:@"&#123;&#125;[</span>](<span class="link"></span>)"];</span><br><span class="line">BOOL bo2 = [<span class="string">self checkPairString:@"&#123;[&#125;[</span>](<span class="link"></span>)"];</span><br><span class="line">BOOL bo3 = [<span class="string">self checkPairString:@"&#123;&#125;[</span>](<span class="link">]</span>)[<span class="string">&#125;"</span>];</span><br><span class="line">NSLog(@"%@",@(bo1));</span><br><span class="line">NSLog(@"%@",@(bo2));</span><br><span class="line">NSLog(@"%@",@(bo3));</span><br></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018<span class="selector-tag">-08-01</span> 19<span class="selector-pseudo">:26</span><span class="selector-pseudo">:06.514245+0800</span> <span class="selector-tag">DemoDemo</span><span class="selector-attr">[5837:852574]</span> 1</span><br><span class="line">2018<span class="selector-tag">-08-01</span> 19<span class="selector-pseudo">:26</span><span class="selector-pseudo">:06.514453+0800</span> <span class="selector-tag">Demo</span><span class="selector-attr">[5837:852574]</span> 0</span><br><span class="line">2018<span class="selector-tag">-08-01</span> 19<span class="selector-pseudo">:26</span><span class="selector-pseudo">:06.514568+0800</span> <span class="selector-tag">Demo</span><span class="selector-attr">[5837:852574]</span> 0</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="面试题：字符串中包含{}[]()三对字符串，当输入时错位或少输多输都为格式错位。比如：{[]}()格式正确，而{[}()]格式错误。">面试题：字符串中包含{}[]()三对字符串，当输入时错位或少输多输都为格式错位。比如：{[]}()格式正确，而{[}()]格式错误。</h2><blockquote>
<p>应用栈来检查，遇到左括号就入栈，遇到右括号就把栈顶的左括号出栈。当字符串扫描完毕后，如果栈内元素为空，则说明括号匹配无误。如果完毕后栈内还有元素，则说明左括号多了；如果进行出栈操作时，栈内已经是空的了，说明右括号多了或者右括号之前没有左括号</p>
</blockquote>]]>
    
    </summary>
    
      <category term="栈" scheme="http://blog.yinuolu.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面试题-字符串转字典]]></title>
    <link href="http://blog.yinuolu.com/2018/07/26/interview-methematical-stringToDic/"/>
    <id>http://blog.yinuolu.com/2018/07/26/interview-methematical-stringToDic/</id>
    <published>2018-07-26T04:22:34.000Z</published>
    <updated>2018-07-26T04:54:13.884Z</updated>
    <content type="html"><![CDATA[<h2 id="昨天面试的时候遇到一道字符串转字典的题，当时把思路写了下来，今天用代码实现一下。">昨天面试的时候遇到一道字符串转字典的题，当时把思路写了下来，今天用代码实现一下。</h2><h2 id="题目的内容大致是这样：">题目的内容大致是这样：</h2><blockquote>
<p>把一个字符串如：afh123jkkx2324klsdkjl839283a3b323n，取出字母作为key,数字作为value，存入一个字典。</p>
</blockquote>
<p>由于字符串的内容只有字母和数字，所以我的大致思路是遍历字符串，判断每个字符的ASCII码，0-9的ASCII码是48~57。在每次字母和数字切换的位置标记为分割点，然后依次取出key，value.<br>下面用两种方式实现<br><a id="more"></a></p>
<h3 id="第一种">第一种</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) stringToDic:(<span class="built_in">NSString</span> *)string &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="built_in">BOOL</span> isNumber = <span class="literal">YES</span>;</span><br><span class="line">    <span class="built_in">NSInteger</span> startPoint = <span class="number">0</span>;<span class="comment">//记录开始点</span></span><br><span class="line">    <span class="built_in">NSString</span> *tempKey = <span class="string">@""</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *tempValue = <span class="string">@""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt; string.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">unichar</span> charStr = [string characterAtIndex:i];</span><br><span class="line">        <span class="keyword">int</span> ascii = toascii(charStr);<span class="comment">//获取ASCII码</span></span><br><span class="line">        <span class="comment">//判断key和value都不为空，保存到dic</span></span><br><span class="line">        <span class="keyword">if</span> (![tempKey isEqualToString:<span class="string">@""</span>] &amp;&amp; ![tempValue isEqualToString:<span class="string">@""</span>]) &#123;</span><br><span class="line">            [dic setObject:tempValue forKey:tempKey];</span><br><span class="line">            tempKey = <span class="string">@""</span>;</span><br><span class="line">            tempValue = <span class="string">@""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ascii&gt;=<span class="number">48</span> &amp;&amp; ascii &lt;= <span class="number">57</span>) &#123;<span class="comment">//数字</span></span><br><span class="line">            <span class="keyword">if</span> (isNumber == <span class="literal">NO</span>) &#123;</span><br><span class="line">                tempKey = [string substringWithRange:<span class="built_in">NSMakeRange</span>(startPoint, i-startPoint)];</span><br><span class="line">                startPoint = i;</span><br><span class="line">                isNumber = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//字母</span></span><br><span class="line">            <span class="keyword">if</span> (isNumber == <span class="literal">YES</span>) &#123;</span><br><span class="line">                tempValue = [string substringWithRange:<span class="built_in">NSMakeRange</span>(startPoint, i-startPoint)];</span><br><span class="line">                startPoint = i;</span><br><span class="line">                isNumber = <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i == string.length <span class="number">-1</span>)&#123;<span class="comment">//最后一个单独处理</span></span><br><span class="line">            <span class="keyword">if</span> (![tempKey isEqualToString:<span class="string">@""</span>] &amp;&amp; ![tempValue isEqualToString:<span class="string">@""</span>]) &#123;</span><br><span class="line">                [dic setObject:tempValue forKey:tempKey];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,dic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>目标字符串：afh123jkkx2324klsdkjl839283a3b323n<br><strong> 打印结果 </strong><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    a = <span class="number">3</span><span class="comment">;</span></span><br><span class="line">    afh = <span class="number">123</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">b </span>= <span class="number">323</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">jkkx </span>= <span class="number">2324</span><span class="comment">;</span></span><br><span class="line">    klsdkjl = <span class="number">839283</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="第二种">第二种</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) stringToDictionary:(<span class="built_in">NSString</span> *)string &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    <span class="built_in">BOOL</span> isNumber = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i=<span class="number">0</span>; i&lt; string.length; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">unichar</span> charStr = [string characterAtIndex:i];</span><br><span class="line">        <span class="keyword">int</span> ascii = toascii(charStr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (ascii&gt;=<span class="number">48</span> &amp;&amp; ascii &lt;= <span class="number">57</span>) &#123;<span class="comment">//数字</span></span><br><span class="line">            <span class="keyword">if</span> (isNumber == <span class="literal">NO</span>) &#123;</span><br><span class="line">                isNumber = <span class="literal">YES</span>;</span><br><span class="line">                [array addObject:@(i)];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//字母</span></span><br><span class="line">            <span class="keyword">if</span> (isNumber == <span class="literal">YES</span>) &#123;</span><br><span class="line">                isNumber = <span class="literal">NO</span>;</span><br><span class="line">                [array addObject:@(i)];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//最后一个单独处理</span></span><br><span class="line">    [array addObject:@(string.length)];</span><br><span class="line">    <span class="comment">//根据分割点切割成字母和数字存入零时数组</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *keyValues = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; array.count<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSInteger</span> start = [array[i] integerValue];</span><br><span class="line">        <span class="built_in">NSInteger</span> lengt = [array[i+<span class="number">1</span>] integerValue] -start;</span><br><span class="line">        <span class="built_in">NSString</span> *itemStr = [string substringWithRange:<span class="built_in">NSMakeRange</span>(start, lengt)];</span><br><span class="line">        [keyValues addObject:itemStr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,keyValues);</span><br><span class="line">    <span class="comment">//从数组中取出元素存入字典，循环的步数为2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i&lt;keyValues.count<span class="number">-1</span>; i=i+<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *key = keyValues[i];</span><br><span class="line">        <span class="built_in">NSString</span> *value = keyValues[i+<span class="number">1</span>];</span><br><span class="line">        [dic setObject:value forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,dic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>目标字符串：afh123jkkx2324klsdkjl839283a3b323n<br><strong> 打印结果 </strong><br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">41</span>:<span class="number">03.921236</span>+<span class="number">0800</span> Demo[<span class="number">42540</span>:<span class="number">6832719</span>] (</span><br><span class="line"><span class="built_in">    afh,</span></span><br><span class="line"><span class="built_in">    123,</span></span><br><span class="line"><span class="built_in">    jkkx,</span></span><br><span class="line"><span class="built_in">    2324,</span></span><br><span class="line"><span class="built_in">    klsdkjl,</span></span><br><span class="line"><span class="built_in">    839283,</span></span><br><span class="line"><span class="built_in">    a,</span></span><br><span class="line"><span class="built_in">    3,</span></span><br><span class="line"><span class="built_in">    b,</span></span><br><span class="line"><span class="built_in">    323,</span></span><br><span class="line">    n</span><br><span class="line">)</span><br><span class="line"><span class="number">2018</span>-<span class="number">07</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">41</span>:<span class="number">03.921494</span>+<span class="number">0800</span> Demo[<span class="number">42540</span>:<span class="number">6832719</span>] &#123;</span><br><span class="line">    <span class="literal">a</span> = <span class="number">3</span><span class="comment">;</span></span><br><span class="line">    afh = <span class="number">123</span><span class="comment">;</span></span><br><span class="line">    b = <span class="number">323</span><span class="comment">;</span></span><br><span class="line">    jkkx = <span class="number">2324</span><span class="comment">;</span></span><br><span class="line">    klsdkjl = <span class="number">839283</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="注意">注意</h2><p>这里需要注意的是字母和数字可能不是成对出现，那么需要处理异常情况，这里只是处理了结束位置为字母的情况，还有一种开始位置为数字的情况没有讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="昨天面试的时候遇到一道字符串转字典的题，当时把思路写了下来，今天用代码实现一下。">昨天面试的时候遇到一道字符串转字典的题，当时把思路写了下来，今天用代码实现一下。</h2><h2 id="题目的内容大致是这样：">题目的内容大致是这样：</h2><blockquote>
<p>把一个字符串如：afh123jkkx2324klsdkjl839283a3b323n，取出字母作为key,数字作为value，存入一个字典。</p>
</blockquote>
<p>由于字符串的内容只有字母和数字，所以我的大致思路是遍历字符串，判断每个字符的ASCII码，0-9的ASCII码是48~57。在每次字母和数字切换的位置标记为分割点，然后依次取出key，value.<br>下面用两种方式实现<br>]]>
    
    </summary>
    
      <category term="Interview" scheme="http://blog.yinuolu.com/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenGL-brief]]></title>
    <link href="http://blog.yinuolu.com/2018/07/19/OpenGL-brief/"/>
    <id>http://blog.yinuolu.com/2018/07/19/OpenGL-brief/</id>
    <published>2018-07-19T14:44:31.000Z</published>
    <updated>2018-07-23T06:36:55.507Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="OpenGL" scheme="http://blog.yinuolu.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iTerm2常用设置和快捷键]]></title>
    <link href="http://blog.yinuolu.com/2018/07/19/iTerm2-setting-and-shortcut/"/>
    <id>http://blog.yinuolu.com/2018/07/19/iTerm2-setting-and-shortcut/</id>
    <published>2018-07-19T14:02:34.000Z</published>
    <updated>2018-07-19T14:39:46.525Z</updated>
    <content type="html"><![CDATA[<h1 id="1-设置窗口">1.设置窗口</h1><p> 定位到 [Preferences - Profiles - Window] 新窗口设定风格设为 [Top of Screen]，这样每次新打开终端都会固定出现在屏幕的顶端且不会有窗口边框。如果你也使用多 Space 和双显示器的话，同时选择 Main Screen 和 All Space 会比较方便。</p>
<h1 id="2-设置快捷键">2.设置快捷键</h1><p> 这一步很简单，定位到 [Preferences - Keys - Hotkey]，这里有两个选项，第一个为设置全局快捷键，在 iTerm 启动的前提下，使用该快捷键可显示或隐藏窗口。第二个指定新窗口使用哪个 Profile，这里就指定为在 Step1 中设置了 WIndow 的那个即可，勾选这个选项能获得显示／隐藏窗口时淡入淡出的技能。</p>
<h1 id="3-Tips">3.Tips</h1><p> <strong> 3.1</strong>  需要全屏？复制原来的 Profile 然后指定快捷键，再 WIndow - Style 选择全屏。<br> <strong> 3.2</strong>「CMD+D」水平分割窗口，为保持界面简洁在 [Preferences - Appearance] 中不勾选 [Show per-pane title bar …]<br> <strong>3.4</strong> 如果使用开机启动 iTerm 的方式则不要勾选 [Preferences - General] [Quit when all windows are closed]<br> <strong>3.5</strong> 在 [Preferences - Pointer] 勾选 [Focus follows mouse]，方便在窗口间切换。<br> <a id="more"></a></p>
<h1 id="4-选中即复制">4.选中即复制</h1><h3 id="iterm2有2种好用的选中即复制模式">iterm2有2种好用的选中即复制模式</h3><ul>
<li>一种是用鼠标，在iterm2中，选中某个路径或者某个词汇，那么，iterm2就自动复制了。 </li>
<li>另一种是无鼠标模式，command+f,弹出iterm2的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入tab，查找窗口将自动变化内容，并将其复制。如果输入的是shift+tab，则自动将查找内容的左边选中并复制。</li>
</ul>
<h1 id="5-剪切历史">5.剪切历史</h1><p> 输入command+shift+h，iterm2将自动列出剪切板的历史记录</p>
<h1 id="6-全屏切换">6.全屏切换</h1><p> command+enter进入与返回全屏模式</p>
<h1 id="其它命令：">其它命令：</h1> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查找: Cmd+f</span><br><span class="line">自动完成: Cmd+;</span><br><span class="line">命令历史: Cmd+Shift+H</span><br><span class="line">命令回放: Cmd+Alt+B</span><br><span class="line">iTerm2 Exposé: Cmd+ Alt+E</span><br><span class="line">Ctrl+a: 光标移动到行首</span><br><span class="line">Ctrl+e: 光标移动到行末</span><br><span class="line">Ctrl+f: 前移一个字符</span><br><span class="line">Ctrl+b: 后退一个字符</span><br><span class="line">Ctrl+l: 清屏</span><br><span class="line">Ctrl+p: 显示历史命令</span><br><span class="line">Ctrl+r: 倒转查找</span><br><span class="line">Ctrl+d: 删除当前字符</span><br><span class="line">Ctrl+h: 删除前一字符</span><br><span class="line">Ctrl+w: 删除光标之前的字符</span><br><span class="line">Ctrl+k: 删除光标之后整行</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="1-设置窗口">1.设置窗口</h1><p> 定位到 [Preferences - Profiles - Window] 新窗口设定风格设为 [Top of Screen]，这样每次新打开终端都会固定出现在屏幕的顶端且不会有窗口边框。如果你也使用多 Space 和双显示器的话，同时选择 Main Screen 和 All Space 会比较方便。</p>
<h1 id="2-设置快捷键">2.设置快捷键</h1><p> 这一步很简单，定位到 [Preferences - Keys - Hotkey]，这里有两个选项，第一个为设置全局快捷键，在 iTerm 启动的前提下，使用该快捷键可显示或隐藏窗口。第二个指定新窗口使用哪个 Profile，这里就指定为在 Step1 中设置了 WIndow 的那个即可，勾选这个选项能获得显示／隐藏窗口时淡入淡出的技能。</p>
<h1 id="3-Tips">3.Tips</h1><p> <strong> 3.1</strong>  需要全屏？复制原来的 Profile 然后指定快捷键，再 WIndow - Style 选择全屏。<br> <strong> 3.2</strong>「CMD+D」水平分割窗口，为保持界面简洁在 [Preferences - Appearance] 中不勾选 [Show per-pane title bar …]<br> <strong>3.4</strong> 如果使用开机启动 iTerm 的方式则不要勾选 [Preferences - General] [Quit when all windows are closed]<br> <strong>3.5</strong> 在 [Preferences - Pointer] 勾选 [Focus follows mouse]，方便在窗口间切换。<br>]]>
    
    </summary>
    
      <category term="iTerm2 Tool" scheme="http://blog.yinuolu.com/tags/iTerm2-Tool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenCV之-实现图片马赛克]]></title>
    <link href="http://blog.yinuolu.com/2018/07/17/OpenCV-Masaic/"/>
    <id>http://blog.yinuolu.com/2018/07/17/OpenCV-Masaic/</id>
    <published>2018-07-17T11:33:58.000Z</published>
    <updated>2018-07-17T13:43:10.689Z</updated>
    <content type="html"><![CDATA[<h2 id="第一什么是OpenCV?">第一什么是OpenCV?</h2><ul>
<li>跨平台视觉库</li>
<li>支持c/c++. java. python. oc . swift. ruby等语言</li>
<li>支持Windows平台，Mac平台，Ios平台，Android平台，Linux平台</li>
</ul>
<h2 id="第二发展历程：">第二发展历程：</h2><p>从1999年至2018年持续更新。</p>
<h2 id="第三支持模块：">第三支持模块：</h2><p>1、人机互动 2、物体识别 3、图像分割4、人脸识别5、动作识别 6、运动跟踪7、机器人 8、运动分析 9、机器视觉 10、结构分析 11、汽车安全驾驶（百度）</p>
<p>前往<a href="https://opencv.org" target="_blank" rel="noopener">官网</a>下载最新版本<a href="https://sourceforge.net/projects/opencvlibrary/files/opencv-ios/3.4.1/opencv-3.4.1-ios-framework.zip/download" target="_blank" rel="noopener">3.4.1</a><br><a id="more"></a></p>
<h2 id="马赛克的实现原理：">马赛克的实现原理：</h2><p>&emsp;&emsp;&ensp;把图片划分成若干个矩阵（自己定义矩阵的大小），把每个矩阵的第一个像素值取出渲染到其他像素点，比如1000x1000的区域，打码成10*10<br><img src="/img/马赛克原理.png" alt="01"></p>
<h2 id="实现效果">实现效果</h2><p>&emsp;&emsp;&ensp;图1~图4分别显示不同矩阵大小的打码效果，<br><img src="/img/demo_masaic.png" alt="02"><br>取固定的间隔在图像处理中叫做采样频率，采样频率不够大的时候是可以通过中值、高斯等平滑方法方法补全的。</p>
<h3 id="实现代码">实现代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.先要导入刚刚下好的opencv库到工程</span></span><br><span class="line"><span class="comment">//2.倒入OpenCV框架</span></span><br><span class="line"><span class="comment">//核心头文件</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//对iOS支持</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/imgcodecs/ios.h&gt;</span></span></span><br><span class="line"><span class="comment">//导入矩阵帮助类</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;opencv2/core/types.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line">    +(UIImage*)opencvImage:(UIImage*)<span class="built_in">image</span> level:(<span class="keyword">int</span>)level&#123;</span><br><span class="line">        <span class="comment">//实现功能</span></span><br><span class="line">        <span class="comment">//第一步：将iOS图片-&gt;OpenCV图片(Mat矩阵)</span></span><br><span class="line">        Mat mat_image_src;</span><br><span class="line">        UIImageToMat(<span class="built_in">image</span>, mat_image_src);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二步：确定宽高</span></span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">width</span> = mat_image_src.cols;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">height</span> = mat_image_src.rows;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//图片类型-&gt;进行转换</span></span><br><span class="line">        <span class="comment">//在OpenCV里面</span></span><br><span class="line">        <span class="comment">//坑隐藏</span></span><br><span class="line">        <span class="comment">//支持-&gt;RGB处理</span></span><br><span class="line">        <span class="comment">//图片ARGB</span></span><br><span class="line">        <span class="comment">//将ARGB-&gt;RGB</span></span><br><span class="line">        Mat mat_image_dst;</span><br><span class="line">        cvtColor(mat_image_src, mat_image_dst, CV_RGBA2RGB, <span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用cvtColor保持一致(RGB)，进行转换的时候，一定要记得转换类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第三步：马赛克处理</span></span><br><span class="line">        <span class="comment">//分析马赛克算法原理</span></span><br><span class="line">        <span class="comment">//level = 3-&gt; 3 * 3矩形</span></span><br><span class="line">        <span class="comment">//动态的处理</span></span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">width</span> - level;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">height</span> - level;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; y; i += level) &#123;</span><br><span class="line">            <span class="built_in">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x; j += level) &#123;</span><br><span class="line">                <span class="comment">//创建一个矩形区域</span></span><br><span class="line">                Rect2i mosaicRect = Rect2i(j, i, level, level);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//给填Rect2i区域-&gt;填充数据-&gt;原始数据</span></span><br><span class="line">                Mat roi = mat_image_dst(mosaicRect);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//让整个矩形区域颜色值保持一致</span></span><br><span class="line">                <span class="comment">//mat_image_clone.at&lt;Vec3b&gt;(i, j)-&gt;取出RGB色值</span></span><br><span class="line">                <span class="comment">//mat_image_clone.at&lt;Vec3b&gt;(i, j)[0]-&gt;R值</span></span><br><span class="line">                <span class="comment">//mat_image_clone.at&lt;Vec3b&gt;(i, j)[1]-&gt;G值</span></span><br><span class="line">                <span class="comment">//mat_image_clone.at&lt;Vec3b&gt;(i, j)[2]-&gt;B值</span></span><br><span class="line">                Scalar scalar = Scalar(</span><br><span class="line">                       mat_image_dst.at&lt;Vec3b&gt;(i, j)[<span class="number">0</span>],</span><br><span class="line">                       mat_image_dst.at&lt;Vec3b&gt;(i, j)[<span class="number">1</span>],</span><br><span class="line">                       mat_image_dst.at&lt;Vec3b&gt;(i, j)[<span class="number">2</span>]);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//将处理好矩形区域-&gt;数据-&gt;拷贝到图片上面去-&gt;修改后的数据</span></span><br><span class="line">                <span class="comment">//CV_8UC3</span></span><br><span class="line">                <span class="comment">//CV_:表示框架命名空间</span></span><br><span class="line">                <span class="comment">//8表示：32位色-&gt;ARGB-&gt;8位 = 1字节 -&gt; 4个字节</span></span><br><span class="line">                <span class="comment">//U</span></span><br><span class="line">                <span class="comment">//两种类型：有符号类型(Sign-&gt;有正负-&gt;简写"S")、无符号类型(Unsign-&gt;正数-&gt;"U")</span></span><br><span class="line">                <span class="comment">//无符号类型：0-255(通常情况)</span></span><br><span class="line">                <span class="comment">//有符号类型：-128-127</span></span><br><span class="line">                <span class="comment">//C分析：char类型</span></span><br><span class="line">                <span class="comment">//3表示：3个通道-&gt;RGB</span></span><br><span class="line">                <span class="comment">//把scalar渲染到mosaicRect矩阵的所有区域</span></span><br><span class="line">                Mat roiCopy = Mat(mosaicRect.<span class="built_in">size</span>(), CV_8UC3, scalar);</span><br><span class="line">                roiCopy.copyTo(roi);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第四步：将OpenCV图片-&gt;iOS图片</span></span><br><span class="line">        <span class="built_in">return</span> MatToUIImage(mat_image_dst);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>先写到这里，未完待续—</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第一什么是OpenCV?">第一什么是OpenCV?</h2><ul>
<li>跨平台视觉库</li>
<li>支持c/c++. java. python. oc . swift. ruby等语言</li>
<li>支持Windows平台，Mac平台，Ios平台，Android平台，Linux平台</li>
</ul>
<h2 id="第二发展历程：">第二发展历程：</h2><p>从1999年至2018年持续更新。</p>
<h2 id="第三支持模块：">第三支持模块：</h2><p>1、人机互动 2、物体识别 3、图像分割4、人脸识别5、动作识别 6、运动跟踪7、机器人 8、运动分析 9、机器视觉 10、结构分析 11、汽车安全驾驶（百度）</p>
<p>前往<a href="https://opencv.org" target="_blank" rel="noopener">官网</a>下载最新版本<a href="https://sourceforge.net/projects/opencvlibrary/files/opencv-ios/3.4.1/opencv-3.4.1-ios-framework.zip/download" target="_blank" rel="noopener">3.4.1</a><br>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://blog.yinuolu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[autolayout-hugging-compression]]></title>
    <link href="http://blog.yinuolu.com/2017/10/12/autolayout-hugging-compression/"/>
    <id>http://blog.yinuolu.com/2017/10/12/autolayout-hugging-compression/</id>
    <published>2017-10-12T14:27:53.000Z</published>
    <updated>2017-10-12T15:31:27.000Z</updated>
    <content type="html"><![CDATA[<p> <strong><em>背景</em></strong><br>最近公司遇到动态计算cell高度的一个需求，由于有段时间没有写UI相关的东西了，autolayout都有点生疏了，所以复习了一下autolayout的内容，在此记下一些笔记，方便日后查阅。</p>
<p>说到autolayout，重点是理解hugging和compression两个属性，在动态计算cell的高度，特别是UILabel多行计算是常态，那么遇到多个UILabel相互依赖，撑起整个cell的高度，以上两个属性是关键。</p>
<p><strong><em> Hugging priority </em></strong> :阻止自己大于真实显示尺寸的优先级<br><strong><em> Compression Resistance priority </em></strong> :阻止自己小于真实尺寸的优先级 </p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ___________________________________________</span><br><span class="line">|<span class="string">  _______</span>|<span class="string">_______        ______</span>|<span class="string">_____      </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">               </span>|<span class="string">      </span>|<span class="string">            </span>|<span class="string">     </span>|</span><br><span class="line">|<span class="string">-</span>|<span class="string">     label1    </span>|<span class="string">------</span>|<span class="string">   label2   </span>|<span class="string">-----</span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">_______________</span>|<span class="string">      </span>|<span class="string">____________</span>|<span class="string">     </span>|<span class="string"> </span></span><br><span class="line">|<span class="string">         </span>|<span class="string">                                 </span>|</span><br><span class="line">|<span class="string">  _______</span>|<span class="string">_________                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                 </span>|<span class="string">                       </span>|</span><br><span class="line">|<span class="string">-</span>|<span class="string">     label3      </span>|<span class="string">                       </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">_________________</span>|<span class="string">                       </span>|</span><br><span class="line">|<span class="string">_________</span>|<span class="string">_________________________________</span>|</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong><em> 例1：水平方向 </em></strong><br>label1.Hugging@251 &gt; label2.Hugging@250<br>当label1和label2内容都不够时填充时，label1保持自己本身的尺寸，label2会被优先拉升<br>label1.compression@751 &gt; label2.compression@750<br>当label1的内容过宽时，label2的内容会被挤压</p>
<p><strong><em> 例2：垂直方向 </em></strong><br>label1.Hugging@251 &gt; label3.Hugging@250<br>同理label3会被优先拉升<br>label1.Compression@751 &gt; label3.Compression@750<br>同理lebel3会被优先压缩</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> <strong><em>背景</em></strong><br>最近公司遇到动态计算cell高度的一个需求，由于有段时间没有写UI相关的东西了，autolayout都有点生疏了，所以复习了一下autolayout的内容，在此记下一些笔记，方便日后查阅。</p>
<p>说到autolayout，重点是理解hugging和compression两个属性，在动态计算cell的高度，特别是UILabel多行计算是常态，那么遇到多个UILabel相互依赖，撑起整个cell的高度，以上两个属性是关键。</p>
<p><strong><em> Hugging priority </em></strong> :阻止自己大于真实显示尺寸的优先级<br><strong><em> Compression Resistance priority </em></strong> :阻止自己小于真实尺寸的优先级 </p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ___________________________________________</span><br><span class="line">|<span class="string">  _______</span>|<span class="string">_______        ______</span>|<span class="string">_____      </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">               </span>|<span class="string">      </span>|<span class="string">            </span>|<span class="string">     </span>|</span><br><span class="line">|<span class="string">-</span>|<span class="string">     label1    </span>|<span class="string">------</span>|<span class="string">   label2   </span>|<span class="string">-----</span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">_______________</span>|<span class="string">      </span>|<span class="string">____________</span>|<span class="string">     </span>|<span class="string"> </span></span><br><span class="line">|<span class="string">         </span>|<span class="string">                                 </span>|</span><br><span class="line">|<span class="string">  _______</span>|<span class="string">_________                        </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">                 </span>|<span class="string">                       </span>|</span><br><span class="line">|<span class="string">-</span>|<span class="string">     label3      </span>|<span class="string">                       </span>|</span><br><span class="line">|<span class="string"> </span>|<span class="string">_________________</span>|<span class="string">                       </span>|</span><br><span class="line">|<span class="string">_________</span>|<span class="string">_________________________________</span>|</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://blog.yinuolu.com/tags/iOS/"/>
    
      <category term="Autolayout" scheme="http://blog.yinuolu.com/categories/Autolayout/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ATS的强制推行]]></title>
    <link href="http://blog.yinuolu.com/2016/09/22/ats-enforced-at-the-end-of-2016/"/>
    <id>http://blog.yinuolu.com/2016/09/22/ats-enforced-at-the-end-of-2016/</id>
    <published>2016-09-22T12:48:34.000Z</published>
    <updated>2016-09-22T13:33:58.000Z</updated>
    <content type="html"><![CDATA[<p>ATS (即App Transport Security) 是 Apple 在2015年WWDC上推进网络通讯安全的一个重要方式。在 iOS 9 和 OS X 10.11 中，默认情况下非 HTTPS 的网络访问是被禁止的。当然，因为这样的推进影响面非常广，作为缓冲，我们可以在<code>Info.plist</code> 中添加<code>NSAppTransportSecurity</code> 字典并且将 <code>NSAllowsArbitraryLoads</code> 设置为 <code>YES</code> 来禁用 <code>ATS</code>。<br><a id="more"></a></p>
<p>不过，WWDC 16 中，Apple 表示将继续在 iOS 10 和 macOSS 10.12 里收紧对普通 HTTP 的访问限制。从 2017 年 1 月 1 日起，所有的新提交 app 默认是不允许使用 <code>NSAllowsArbitraryLoads</code> 来绕过 ATS 限制的，也就是说，我们最好保证 app 的所有网络请求都是 HTTPS 加密的，否则可能会在应用审核时遇到麻烦。<a href="https://developer.apple.com/videos/play/wwdc2016/706/" target="_blank" rel="noopener">相关视频地址</a><br><em>以下是我在苹果官方的WWDC2016的相关视频中的截图</em><br><img src="/img/ats_enforced.png" alt=""></p>
<h4 id="苹果官方对加密的要求是：">苹果官方对加密的要求是：</h4><ul>
<li>app只能访问加密足够强(TLSv1.2以上,AES-128和SHA-2以及ECDHC等)的HTTPS内容.</li>
<li>依然可以添加<code>NSAllowArbitraryLoads</code>为<code>YES</code>来禁用ATS,不过需要在提交app时进行特别说明，访问非https得原因。一般来说，可能类似浏览器的app或访问第三方服务器的api才符合条件。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>ATS (即App Transport Security) 是 Apple 在2015年WWDC上推进网络通讯安全的一个重要方式。在 iOS 9 和 OS X 10.11 中，默认情况下非 HTTPS 的网络访问是被禁止的。当然，因为这样的推进影响面非常广，作为缓冲，我们可以在<code>Info.plist</code> 中添加<code>NSAppTransportSecurity</code> 字典并且将 <code>NSAllowsArbitraryLoads</code> 设置为 <code>YES</code> 来禁用 <code>ATS</code>。<br>]]>
    
    </summary>
    
      <category term="ATS" scheme="http://blog.yinuolu.com/tags/ATS/"/>
    
      <category term="Security" scheme="http://blog.yinuolu.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈svn和git]]></title>
    <link href="http://blog.yinuolu.com/2016/09/20/talk-about-git-and-svn/"/>
    <id>http://blog.yinuolu.com/2016/09/20/talk-about-git-and-svn/</id>
    <published>2016-09-20T15:52:09.000Z</published>
    <updated>2016-09-21T15:38:10.000Z</updated>
    <content type="html"><![CDATA[<p>在这里有必要纠正一下Git的发音。一种错误是按照单个字母来发音，另外一种更为普遍的错误是把整个单词读作“技特”，实际上Git中字母G的发音与下列单词中的G类似：GOD、GIVES、GREAT、GIFT。因此Git正确的发音应该听起来像是“歌易特”。<br><a id="more"></a></p>
<h2 id="一、版本控制的前世今生">一、版本控制的前世今生</h2><p>版本控制系统是一个另类。虽然其历史并不短暂，也有几十年，但是它的演进进程却一直在社会的各个角落重复着，而且惊人的相似。有的人从未使用甚至从未听说过版本控制系统，他和他的团队就像停留在黑暗的史前时代，任由数据自生自灭。有的人使用着有几十年历史的CVS或其改良版Subversion，让时间空耗在网络连接的等待中。以Git为代表的分布式版本控制系统已经风靡整个开源社区，正等待你的靠近。</p>
<h4 id="1-1_黑暗的史前时代">1.1 黑暗的史前时代</h4><p>实际上，即便是在CVS出现之前的“史前时代”，也已经有了非常好用的用于源码比较和打补丁的工具：diff和patch，它们今天生命力依然顽强。大名鼎鼎的Linus Torvalds先生（Linux之父）也对这两个工具偏爱有加，在1991~2002年之间，Linus一直顽固地使用diff、patch和tar包管理着Linux的代码，虽然不断有人提醒他有CVS的存在。<br><img src="/img/diff_file.png" alt="diff 比较两个文件"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ diff -u hello world &gt; diff.txt</span><br></pre></td></tr></table></figure>
<p><img src="/img/diff_result.png" alt="diff 比较两个文件"></p>
<h4 id="1-2_CVS——开启版本控制大爆发">1.2 CVS——开启版本控制大爆发</h4><p>CVS（Concurrent Versions System）诞生于1985年，是由荷兰阿姆斯特丹VU大学的Dick Grune教授实现的。当时Dick Grune和两个学生共同开发一个项目，但是三个人的工作时间无法协调到一起，迫切需要一个记录和协同开发的工具软件。于是Dick Grune通过脚本语言对RCS（一个针对单独文件的版本管理工具）进行封装，设计出有史以来第一个被大规模使用的版本控制工具。Dick教授的网站上介绍了CVS的这段早期历史。</p>
<p><em>“在1985年的一个糟糕的秋日里，我在校汽车站等车回家，脑海里一直纠结着一件事——如何处理RCS文件、用户文件（工作区）和Entries文件的复杂关系，有的文件可能会缺失、冲突、删除，等等。我的头有些晕了，于是决定画一个大表，将复杂的关联画在其中，看看出来的结果是什么样的……”</em></p>
<p>1986年Dick通过新闻组发布了CVS，1989年Brian Berliner用C语言将CVS进行了重写。<br>    从CVS的历史可以看出，CVS不是设计出来的，而是被实际需要“逼”出来的，因此根据“实用为上”的原则，借用了已有的针对单一文件的版本管理工具RCS。CVS采用客户端/服务器架构设计，版本库位于服务器端，实际上就是一个RCS文件容器。每一个RCS文件以“，v”作为文件名后缀，用于保存对应文件的每一次更改历史。RCS文件中只保留一个版本的完全拷贝，其他历次更改仅将差异存储其中，使得存储变得非常有效率。</p>
<p><img src="/img/cvs_short_brief.png" alt="cvs的简易结构图" title="cvs的简易结构图"></p>
<ul>
<li>服务器端松散的RCS文件导致在建立里程碑或分支时效率不高，服务器端文件越多，速度越慢。</li>
<li>分支和里程碑不可见，因为它们被分散地记录在服务器端的各个RCS文件中。</li>
<li>合并困难重重，因为缺乏对合并的追踪，从而导致重复合并，引发严重冲突。</li>
<li>缺乏对原子提交的支持，会导致客户端向服务器端提交不完整的数据。</li>
<li>不能优化存储内容相同但文件名不同的文件，因为在服务器端每个文件都是单独进行差异存储的。</li>
<li>不能对文件和目录的重命名进行版本控制，虽然直接在服务器端修改RCS文件名可以让改名后的文件保存历史，但是这样做实际上会破坏历史。</li>
</ul>
<p>CVS的成功导致了版本控制系统的大爆发，各式各样的版本控制系统如雨后春笋般诞生了。新的版本控制系统或多或少地解决了CVS版本控制系统存在的问题。在这些版本控制系统中，最典型的就是Subversion（SVN）。</p>
<h4 id="1-3_SVN——集中式版本控制集大成者">1.3 SVN——集中式版本控制集大成者</h4><p>Subversion，由于其命令行工具名为svn，因此通常被简称为SVN。SVN由CollabNet公司于2000年资助并开始开发，目的是创建一个更好用的版本控制系统以取代CVS。SVN的前期开发使用CVS做版本控制，到了2001年，SVN已经可以用于自己的版本控制了。<br><img src="/img/svn_short_brief.png" alt="svn的简易结构图" title="svn的简易结构图"><br>SVN的每一次提交，都会在服务器端的db/revs和db/revprops目录下各创建一个以顺序数字编号命名的文件。其中，db/revs目录下的文件（即变更集文件）记录了与上一个提交之间的差异（字母A表示新增，M表示修改，D表示删除）。在db/revprops目录下的同名文件（没有在图1-2中体现）则保存着提交日志、作者、提交时间等信息。这样设计的好处有:</p>
<ul>
<li></li>
<li>拥有全局版本号。每提交一次，SVN的版本号就会自动加一。这为SVN的使用提供了极大的便利。回想CVS时代，每个文件都拥有各自独立的版本号（RCS版本号），要想获得全局版本号，只能通过手工不断地建立里程碑来实现。</li>
<li>实现了原子提交。SVN不会像CVS那样出现文件的部分内容被提交而其余的内容没有被提交的情况。·文件名不受限制。因为服务器端不再需要建立和客户端文件相似的文件名，于是，文件的命名就不再受服务器操作系统的字符集和大小写的限制。</li>
<li>文件和目录重命名也得到了支持。<br>*<br>SVN最具有特色的功能是轻量级拷贝，例如将目录trunk拷贝为branches/v1.x只相当于在db/revs目录中的变更集文件中用特定的语法做了一下标注，无须真正的文件拷贝。SVN使用轻量级拷贝的功能，轻松地解决了CVS存在的里程碑和分支的创建速度慢又不可见的问题，使用SVN创建里程碑和分支只在眨眼之间。SVN在版本库授权上也有改进，不再像CVS那样依赖操作系统本身对版本库目录和文件进行授权，而是采用授权文件的方式来实现。</li>
</ul>
<p>但是，相对于CVS，SVN在本质上并没有突破，都属于集中式版本控制系统。即一个项目只有唯一的一个版本库与之对应，所有的项目成员都通过网络向该服务器进行提交。这样的设计除了容易出现单点故障以外，在查看日志和提交数据等操作时的延迟，会让基于广域网协同工作的团队抓狂。除了集中式版本控制系统固有的问题外，SVN的里程碑和分支的设计也被证明是一个错误，虽然这个错误的设计使得SVN拥有了快速创建里程碑和分支的能力，但是这个错误的设计也导致了如下的更多问题。<br><em><br>项目文件在版本库中必须按照一定的目录结构进行部署，否则就可能无法建立里程碑和分支。
</em></p>
<p>我在项目咨询过程中见过很多团队，直接在版本库的根目录下创建项目文件。这样的版本库布局，在需要创建里程碑和分支时就无从下手了，因为根目录是不能拷贝到子目录中的。所以SVN的用户在创建版本库时必须遵守一个古怪的约定：先创建三个顶级目录/trunk、/tags和/branches。<br><em><br>创建里程碑和分支会破坏精心设计的授权。
</em></p>
<p>SVN的授权是基于目录的，分支和里程碑也被视为目录（和其他目录没有分别）。因此每次创建分支或里程碑时，就要将针对/trunk目录及其子目录的授权在新建的分支或里程碑上重建。随着分支和里程碑数量的增多，授权愈加复杂，维护也愈加困难。</p>
<h5 id="svn_的归宿">svn 的归宿</h5><p>2009年年底，SVN由CollabNet公司交由Apache社区管理，至此SVN成为了Apache组织的一个子项目。这对SVN到底意味着什么？是开发的停滞？还是新的开始？结果如何我们将拭目以待。</p>
<h4 id="1-4_Git——Linus的第二个伟大作品">1.4 Git——Linus的第二个伟大作品</h4><p>Linux之父Linus是坚定的CVS反对者，他也同样地反对SVN。这就是为什么在1991-2002这十余年间，Linus宁可以手工修补文件的方式维护代码，也迟迟不愿使用CVS的原因。我想在当时要想劝说Linus使用CVS只有一个办法：把CVS服务器请进Linus的卧室，并对外配以千兆带宽。2002年至2005年，Linus顶着开源社区精英们口诛笔伐的压力，选择了一个商业版本控制系统BitKeeper作为Linux内核的代码管理工具。BitKeeper不同于CVS和SVN等集中式版本控制工具，而是一款分布式版本控制工具。分布式版本控制系统最大的反传统之处在于，可以不需要集中式的版本库，每个人都工作在通过克隆建立的本地版本库中。也就是说每个人都拥有一个完整的版本库，查看提交日志、提交、创建里程碑和分支、合并分支、回退等所有操作都直接在本地完成而不需要网络连接。每个人都是本地版本库的主人，不再有谁能提交谁不能提交的限制，加上多样的协同工作模型（版本库间推送、拉回，以及补丁文件传送等）让开源项目的参与度有爆发式增长。<br>2005年发生的一件事最终导致了Git的诞生。在2005年4月，AndrewTridgell（即大名鼎鼎的Samba的作者）试图对BitKeeper进行反向工程，以开发一个能与BitKeeper交互的开源工具。这激怒了BitKeeper软件的所有者BitMover公司，要求收回对Linux社区免费使用BitKeeper的授权。迫不得已，Linus选择了自己开发一个分布式版本控制工具以替代BitKeeper。[此处只有膜拜orz]<br>以下是Git诞生过程中的大事记：<br><em><br>·2005年4月3日，开始开发Git。<br>·2005年4月6日，项目发布。<br>·2005年4月7日，Git就可以作为自身的版本控制工具了。<br>·2005年4月18日，发生第一个多分支合并。<br>·2005年4月29日，Git的性能就已经达到了Linus的预期。<br>·2005年6月16日，Linux内核2.6.12发布，那时Git已经在维护Linux核心的源代码了。
</em></p>
<p>Linus以一个文件系统专家和内核设计者的视角对Git进行了设计，其独特的设计让Git拥有非凡的性能和最为优化的存储能力。完成原型设计后，在2005年7月26日，Linus功成身退，将Git的维护交给另外一个Git的主要贡献者Junio C Hamano，直到现在。<br>最初的Git除了一些核心命令以外，其他的都用脚本语言开发，而且每个功能都作为一条独立的命令，例如克隆操作用git-clone，提交操作用git-commit。这导致Git拥有庞大的命令集，使用习惯也和其他版本控制系统格格不入。随着Git的开发者和使用者的增加，Git也在逐渐演变，例如到1.5.4版本时，将一百多个独立的命令封装为一个git命令，使它看起来更像是一个独立的工具，也使Git更贴近于普通用户的使用习惯。<br>经过短短几年的发展，众多的开源项目都纷纷从SVN或其他版本控制系统迁移到Git。虽然版本控制系统的迁移过程是痛苦的，但是因为迁移到Git会带来开发效率的极大提升，以及巨大的效益，所以很快就会忘记迁移的痛苦过程，而且很快就会适应新的工作模式。在Git的官方网站上列出了几个使用Git的重量级项目，每一个都是人们耳熟能详的，除了Git和Linux内核外，还有Perl、Eclipse、Gnome、KDE、Qt、Ruby on Rails、Android、PostgreSQL、Debian、X.org，当然还有GitHub的上百万个项目。Git虽然是在Linux下开发的，但现在已经可以跨平台运行在所有主流的操作系统上，包括Linux、Mac OS X和Windows等。可以说每一个使用计算机的用户都可以分享Git带来的便利和快乐。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在这里有必要纠正一下Git的发音。一种错误是按照单个字母来发音，另外一种更为普遍的错误是把整个单词读作“技特”，实际上Git中字母G的发音与下列单词中的G类似：GOD、GIVES、GREAT、GIFT。因此Git正确的发音应该听起来像是“歌易特”。<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://blog.yinuolu.com/tags/git/"/>
    
      <category term="svn" scheme="http://blog.yinuolu.com/tags/svn/"/>
    
      <category term="cvs" scheme="http://blog.yinuolu.com/tags/cvs/"/>
    
      <category term="版本控制" scheme="http://blog.yinuolu.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Swift语言学习笔记一(可选类型? 和隐式可选类型!)]]></title>
    <link href="http://blog.yinuolu.com/2016/03/21/note-one-for-optional-in-swift/"/>
    <id>http://blog.yinuolu.com/2016/03/21/note-one-for-optional-in-swift/</id>
    <published>2016-03-21T13:03:11.000Z</published>
    <updated>2016-03-21T13:46:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="可选类型、隐式可选类型">可选类型、隐式可选类型</h1><p>在Swift 中可选类型是一个枚举类型(Enum),里面有None和非None两种类型，nil对应于Optional.None;非nil对应于Optional.Some(Wrapped),通过Some(Wrapped) 包装原始值，这也是为什么在使用Optional的时候要拆包（从Enum中的Some取出原始值）的原因，同理在PlayGround中会把Optional值显示为类似{Some”Hello World”}，以下是Enum Optional的定义<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">Wrapped</span>&gt; : <span class="title">_Reflectable</span>, <span class="title">NilLiteralConvertible</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">None</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(<span class="type">Wrapped</span>)</span><br><span class="line"><span class="comment">/// Construct a `nil` instance.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>()</span><br><span class="line"><span class="comment">/// Construct a non-`nil` instance that stores `some`.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> some: <span class="type">Wrapped</span>)</span><br><span class="line"><span class="comment">/// If `self == nil`, returns `nil`.  Otherwise, returns `f(self!)`.</span></span><br><span class="line"><span class="meta">@warn_unused_result</span></span><br><span class="line">@<span class="keyword">rethrows</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(@noescape f: <span class="params">(Wrapped)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</span><br><span class="line"><span class="comment">/// Returns `nil` if `self` is nil, `f(self!)` otherwise.</span></span><br><span class="line"><span class="meta">@warn_unused_result</span></span><br><span class="line">@<span class="keyword">rethrows</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(@noescape f: <span class="params">(Wrapped)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>?) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</span><br><span class="line"><span class="comment">/// Create an instance initialized with `nil`.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(nilLiteral: ())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="语法“?”使用">语法“?”使用</h2><h1 id="1-申明Optional值变量">1.申明Optional值变量</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalName:<span class="built_in">String</span>? = “Hello John”<span class="comment">//定义一个可选变量optionalName并进行初始化</span></span><br><span class="line"><span class="comment">//optionalName = nil</span></span><br><span class="line"><span class="built_in">print</span>(optionalName)<span class="comment">//输出 Optional("Hello John”)</span></span><br><span class="line"><span class="built_in">print</span>(optionalName!)<span class="comment">//输出 "Hello John"</span></span><br></pre></td></tr></table></figure>
<p>第一次输出和第二次输出的不同正好验证了上面的介绍，直接打印一个Optional变量，会打印出包装后的枚举值Some(Wrapped),如果要取得原始值必须进行拆包操作，即optionalName!拆包后打印出的值为原始值”Hello John”<br>如果打开第二行的注释，//optionalName = nil 相当于var optionalName:String，即不对optionalName进行初始化，第一次输出为nil，第二次输入的代码编译不过,因为这是一个可选变量，当变量为nil时，自动验证是否有可选的值，有则使用可选值，加上!访问符来访问optionalName变量，由于optionalName的值为nil，并没有包含一个实际值，所以抛出异常。可以用以下代码代替<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">if</span> (optionalName != nil) &#123;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(optionalName!)</span></span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">if</span> let temp = optionalName &#123;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(temp)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法三</span></span><br><span class="line"><span class="keyword">if</span> <span class="selector-tag">var</span> temp = optionalName &#123;</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(temp)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="2-用在对Optional值操作时，判断是否能响应后面的操作，且看示例">2.用在对Optional值操作时，判断是否能响应后面的操作，且看示例</h1><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button:<span class="type">UIButton</span>?</span><br><span class="line"><span class="keyword">let</span> color = button?.tintColor</span><br><span class="line">//解释:button 是可选变量，如果button是<span class="keyword">nil</span>,则tintColor为<span class="keyword">nil</span>；如果button不为<span class="keyword">nil</span>,tintColor就是button的一个颜色属性值</span><br></pre></td></tr></table></figure>
<h2 id="语法”!”的使用">语法”!”的使用</h2><p>上面已经用到了!,主要是用来：</p>
<h1 id="1-定义隐式可选变量">1.定义隐式可选变量</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">button</span>:UIButton! = UIButton()<span class="comment">//定义一个隐式可选变量button，一定为非nil,在使用的时候不用每次都用?号判断是否为nil</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">button</span>:UIButton!</span><br><span class="line"><span class="selector-tag">button</span> = UIButton()</span><br></pre></td></tr></table></figure>
<h1 id="2-拆包可选变量">2.拆包可选变量</h1><p>可选类型变量，不能直接进行操作，否则会报错。因此要访问值就需要拆包。拆包有两种。<br>第一种:使用if let/var xxx =<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalName:<span class="built_in">String</span>? = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> temp = optional &#123;</span><br><span class="line"><span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二种：使用!号<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalName:<span class="built_in">String</span>? = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">let</span> hv = optionalName!.hashValue <span class="comment">//这里的!表示这里的optionalName一定是非nil的，否则会报错</span></span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>在Swift中任何变量/常量的声明都必须带有初始值，否则就要声明为可选类型。<br>即var name:String 这样是编译不过的。必须改为带初始化的如：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="built_in">String</span> = “John<span class="string">"</span></span><br></pre></td></tr></table></figure>
<p>或者使用?或者!来约束,因此常常声明可选或隐式可选变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="built_in">String</span>? <span class="comment">//可选变量，在程序中不能确定该变量是否为nil的情况下使用</span></span><br><span class="line"><span class="keyword">var</span> name1:<span class="built_in">String</span>!<span class="comment">//隐式可选变量，在程序中可以确认该变量一定不为nil的情况下使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//看看两种声明的具体用法就可以对比他们的不同之处</span></span><br><span class="line"><span class="keyword">var</span> button1:UIButton?</span><br><span class="line"><span class="keyword">var</span> button2:UIButton! = UIButton()</span><br><span class="line"><span class="comment">//注意!号的使用</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tempBtn = button1&#123;</span><br><span class="line">button1!.frame = CGRectMake(<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">40</span>)</span><br><span class="line">button1!.tintColor = UIColor.blackColor()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tempBtn = button2&#123;</span><br><span class="line">button2.frame = CGRectMake(<span class="number">0</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">40</span>)</span><br><span class="line">button2.tintColor = UIColor.blackColor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="感悟：">感悟：</h2><p>可选类型是Swift推出的全新语言类型，任何变量声明的同时必须进行初始化，否则就必须使用可选，在使用可选变量的时候赋值和使用都不方便，于是Swift推出隐式可选变量，使得申明的时候不用赋初值，使用过程中也不需要每次拆包以及验证是否为nil,但是付出的代价就是牺牲一定的安全性。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="可选类型、隐式可选类型">可选类型、隐式可选类型</h1><p>在Swift 中可选类型是一个枚举类型(Enum),里面有None和非None两种类型，nil对应于Optional.None;非nil对应于Optional.Some(Wrapped),通过Some(Wrapped) 包装原始值，这也是为什么在使用Optional的时候要拆包（从Enum中的Some取出原始值）的原因，同理在PlayGround中会把Optional值显示为类似{Some”Hello World”}，以下是Enum Optional的定义<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">Wrapped</span>&gt; : <span class="title">_Reflectable</span>, <span class="title">NilLiteralConvertible</span> </span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">None</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(<span class="type">Wrapped</span>)</span><br><span class="line"><span class="comment">/// Construct a `nil` instance.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>()</span><br><span class="line"><span class="comment">/// Construct a non-`nil` instance that stores `some`.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> some: <span class="type">Wrapped</span>)</span><br><span class="line"><span class="comment">/// If `self == nil`, returns `nil`.  Otherwise, returns `f(self!)`.</span></span><br><span class="line"><span class="meta">@warn_unused_result</span></span><br><span class="line">@<span class="keyword">rethrows</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(@noescape f: <span class="params">(Wrapped)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</span><br><span class="line"><span class="comment">/// Returns `nil` if `self` is nil, `f(self!)` otherwise.</span></span><br><span class="line"><span class="meta">@warn_unused_result</span></span><br><span class="line">@<span class="keyword">rethrows</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(@noescape f: <span class="params">(Wrapped)</span></span></span> <span class="keyword">throws</span> -&gt; <span class="type">U</span>?) <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</span><br><span class="line"><span class="comment">/// Create an instance initialized with `nil`.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(nilLiteral: ())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://blog.yinuolu.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://blog.yinuolu.com/tags/Swift/"/>
    
      <category term="Optional" scheme="http://blog.yinuolu.com/tags/Optional/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[儿歌吧隐私政策]]></title>
    <link href="http://blog.yinuolu.com/2016/02/26/%E5%84%BF%E6%AD%8C%E5%90%A7%E9%9A%90%E7%A7%81%E6%94%BF%E7%AD%96/"/>
    <id>http://blog.yinuolu.com/2016/02/26/儿歌吧隐私政策/</id>
    <published>2016-02-26T15:21:12.000Z</published>
    <updated>2016-03-21T13:55:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="隐私政策">隐私政策</h3><!--toc-->
<ul>
<li>1.<a href="#mao1">关于非个人化信息</a></li>
<li>2.<a href="#mao2">关于个人资料</a></li>
<li>3.<a href="#mao3">关于信息安全</a></li>
<li>4.<a href="#mao4">关于用户权利</a></li>
<li>5.<a href="#mao5">关于用户信息限制利用原则</a></li>
<li>6.<a href="#mao6">关于个人资料披露之原则</a></li>
</ul>
<!--tocstop-->
<p>儿歌吧及旗下app（后续简称本网站） 隐私权保护声明系本网站对于保护用户个人隐私之承诺。鉴于互联网的特性，本网站在运营过程中，将无可避免地与用户发生直接或间接的互动关系，故特此说明本网站对用户个人信息所采取的收集、使用和保护政策，请您务必仔细阅读。</p>
<p>关于非个人化信息<br><a name="mao1"><br>第一条 本站将通过用户的IP地址来收集非个人化的信息，例如浏览器和操作系统的种类、提供接入服务的ISP名称等，以优化在您计算机屏幕上显示的页面；并通过收集上述信息，进行访客流量统计。这些无关个人身份的信息能帮助本站辨别内容喜好的地区性分布，并保证本站进行推广活动的有效性。此外，本站也可能将这些信息披露给相关广告客户，使其知晓点击其广告的人数。<br><a id="more"></a></a></p>
<p>关于个人资料<br><a name="mao2"><br>第二条 当您在本网站进行用户注册登记、发表文章、参与公共论坛讨论等活动时，在您的同意及确认下，本网站将通过注册表格、订单等形式要求您提供一些个人资料。这些个人资料包括：  1. 子女信息： 如孩子姓名、年龄、出生日期、教育状况等。  本站收集此类个人身份信息，主要是为保证注册用户能够更容易和更满意地使用本站提供的服务。  在未经您同意及确认之前，本网站不会将您为参加本网站之特定活动所提供的资料利用于其他目的。按照以下第六条的规定则不在此限。 </a></p>
<p>关于信息安全<br><a name="mao3"><br>第三条 本网站将对您所提供的资料进行严格的管理及保护，本网站将使用相应的技术，防止您的个人资料丢失、被盗用或遭篡改。</a></p>
<p>关于用户权利<br><a name="mao4"><br>第四条 1、您对于自己的个人资料享有以下权利：  a. 随时查询及请求阅览； b. 随时请求补充或更正； c. 随时请求删除； d. 请求停止电脑处理及利用。  2、用户是唯一对自己的口令及其他帐户信息负有保密责任的人。当您在线时，请小心和负责。</a></p>
<p>关于用户信息限制利用原则<br><a name="mao5"><br>第五条 本网站唯在符合下列条件之一，方对收集的个人资料进行必要范围以外的利用：<br>1、已取得您的书面同意；<br>2、为免除您在生命、身体或财产方面的急迫危险；<br>3、为防止他人权益的重大危害；<br>4、为增进公共利益，且无害于您的重大利益。</a></p>
<p>关于个人资料披露之原则<br><a name="mao6"><br>第六条 当政府机关依照法定程序要求本网站披露个人资料时，本网站将根据执法单位之要求或为公共安全之目的提供个人资料。在此情况下之任何披露，本网站均免责。</a></p>
<p>关于公共论坛</p>
<p>第七条 本网站为您提供博客免费托管、聊天室、公告牌等服务。在这些区域内，您公布的任何信息都会成为公开的信息。因此，本站郑重提醒并请您慎重考虑是否有必要在这些区域公开您的个人信息。</p>
<p>关于未成年人隐私权的保护</p>
<p>第八条<br>1、本网站将建立和维持合理的程序，以保护未成年人个人资料的保密性及安全性。本网站郑重声明：任何16岁以下的未成年人参加网上活动应事先得到家长或其法定监护人（以下统称为“监护人”）的可经查证的同意。<br>2、监护人应承担保护未成年人在网络环境下的隐私权的首要责任。<br>3、本网站收集未成年人的个人资料，仅为回覆未成人特定要求的目的，一俟回复完毕即从记录中删除，而不会保留这些资料做进一步的利用。<br>4、未经监护人之同意，本网站将不会使用未成年人之个人资料，亦不会向任何第三方披露或传送可识别该未成年人的个人资料。本网站如收集监护人或未成年人的姓名或其他网络通讯资料之目的仅是为获得监护人同意，则在经过一段合理时间仍未获得同意时，将主动从记录中删除此类资料。<br>5、若经未成年人之监护人同意，本网站可对未成年人之个人资料进行收集，本网站将向监护人提供：<br>（1）审视自其子女或被监护人收集之资料的机会；<br>（2）拒绝其子女或被监护人的个人资料被进一步的收集或利用的机会；<br>（3）变更或删除其子女或被监护人个人资料的方式。<br>6、监护人有权拒绝本网站与其子女或被监护人做进一步的联络。<br>7、本网站收集未成年人的个人资料，这些资料只是单纯作为保护未成年人参与网络活动时的安全，而非作为其它目的之利用。本网站保证不会要求未成年人提供额外的个人资料，以作为允许其参与网上活动的条件。</p>
<p>关于Cookies</p>
<p>第九条<br>1、Cookies是指一种技术，当使用者访问设有Cookies装置的本网站时，本网站之服务器会自动发送Cookies至使用者浏览器内，并储存到电脑硬盘内，此Cookies便负责记录日后您到访本网站的种种活动、个人资料、浏览习惯、消费习惯甚至信用记录。<br>2、运用Cookies技术，本网站能够为您提供更加周到的个性化服务。本网站将会运用Cookies追访用户的内容浏览习惯，从而向您提供符合您喜好的内容，节省您的时间；另外，本站亦将会采用Cookies技术帮助您储存密码，以便您造访本网站时不必每次重复输入密码。</p>
<p>免责条款</p>
<p>第十条 除上述（六）之规定属免责外，下列情况时本网站亦毋需承担任何责任：<br>1、由于您将用户密码告知他人或与他人共享注册帐户，由此导致的任何个人资料泄露。<br>2、任何由于计算机问题、黑客政击、计算机病毒侵入或发作、因政府管制而造成的暂时性关闭等影响网络正常经营之不可抗力而造成的个人资料泄露、丢失、被盗用或被窜改等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="隐私政策">隐私政策</h3><!--toc-->
<ul>
<li>1.<a href="#mao1">关于非个人化信息</a></li>
<li>2.<a href="#mao2">关于个人资料</a></li>
<li>3.<a href="#mao3">关于信息安全</a></li>
<li>4.<a href="#mao4">关于用户权利</a></li>
<li>5.<a href="#mao5">关于用户信息限制利用原则</a></li>
<li>6.<a href="#mao6">关于个人资料披露之原则</a></li>
</ul>
<!--tocstop-->
<p>儿歌吧及旗下app（后续简称本网站） 隐私权保护声明系本网站对于保护用户个人隐私之承诺。鉴于互联网的特性，本网站在运营过程中，将无可避免地与用户发生直接或间接的互动关系，故特此说明本网站对用户个人信息所采取的收集、使用和保护政策，请您务必仔细阅读。</p>
<p>关于非个人化信息<br><a name="mao1"><br>第一条 本站将通过用户的IP地址来收集非个人化的信息，例如浏览器和操作系统的种类、提供接入服务的ISP名称等，以优化在您计算机屏幕上显示的页面；并通过收集上述信息，进行访客流量统计。这些无关个人身份的信息能帮助本站辨别内容喜好的地区性分布，并保证本站进行推广活动的有效性。此外，本站也可能将这些信息披露给相关广告客户，使其知晓点击其广告的人数。<br>]]>
    
    </summary>
    
      <category term="儿歌吧" scheme="http://blog.yinuolu.com/tags/%E5%84%BF%E6%AD%8C%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[儿歌吧主页]]></title>
    <link href="http://blog.yinuolu.com/2016/02/26/%E5%84%BF%E6%AD%8C%E5%90%A7%E4%B8%BB%E9%A1%B5/"/>
    <id>http://blog.yinuolu.com/2016/02/26/儿歌吧主页/</id>
    <published>2016-02-26T14:11:40.000Z</published>
    <updated>2016-09-22T14:22:04.000Z</updated>
    <content type="html"><![CDATA[<!--toc-->
<p>1.<a href="#mou_1">简介</a><br>2.<a href="#mou_2">儿歌吧特色</a><br><!--tocstop--></p>
<h3 id="简介">简介</h3><p><a name="mou_1"><br>儿歌吧，收集上百个好听的儿歌、童谣。满足于0-5岁宝宝的儿歌需求，通过儿歌吧的视频和动画内容帮助您的宝宝快乐健康的成长，促进宝宝的智力开发。</a></p>
<p>儿歌吧，是初为父母的您的育儿好帮手。每当宝宝不起床，调皮捣蛋不吃饭，哭闹没辙的时候，给宝宝播放一段唱唱跳跳的动画视频，让宝宝立马消停。<br><a id="more"></a></p>
<h3 id="儿歌吧的特色：">儿歌吧的特色：</h3><p><a name="mou_2"><br>【视觉盛宴】儿歌吧，丰富的色彩搭配，让宝宝仿佛进入童话世界般视觉享受，跟着动画快速进入学习状态。</a></p>
<p>【三大分类】儿歌、童谣、好习惯三大分类，帮助您的孩子选择合适的动画需求。</p>
<p>【极致视频体验】采用iOS原生的播放控件，流程的播放体验，配上优质的视频内容，让您的孩子爱不释手。</p>
<p><img src="/img/icon_01.png" alt="01"> <img src="/img/icon_02.png" alt="02"> <img src="/img/icon_03.png" alt="03"></p>
]]></content>
    <summary type="html">
    <![CDATA[<!--toc-->
<p>1.<a href="#mou_1">简介</a><br>2.<a href="#mou_2">儿歌吧特色</a><br><!--tocstop--></p>
<h3 id="简介">简介</h3><p><a name="mou_1"><br>儿歌吧，收集上百个好听的儿歌、童谣。满足于0-5岁宝宝的儿歌需求，通过儿歌吧的视频和动画内容帮助您的宝宝快乐健康的成长，促进宝宝的智力开发。</a></p>
<p>儿歌吧，是初为父母的您的育儿好帮手。每当宝宝不起床，调皮捣蛋不吃饭，哭闹没辙的时候，给宝宝播放一段唱唱跳跳的动画视频，让宝宝立马消停。<br>]]>
    
    </summary>
    
      <category term="儿歌吧" scheme="http://blog.yinuolu.com/tags/%E5%84%BF%E6%AD%8C%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开发者证书个人理解]]></title>
    <link href="http://blog.yinuolu.com/2015/11/12/%E5%BC%80%E5%8F%91%E8%80%85%E8%AF%81%E4%B9%A6%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <id>http://blog.yinuolu.com/2015/11/12/开发者证书个人理解/</id>
    <published>2015-11-12T14:01:11.000Z</published>
    <updated>2015-11-16T13:44:49.000Z</updated>
    <content type="html"><![CDATA[<p>在苹果开发中避免不了的要和开发者账号打交道，在XCode7.0之前要在真机进行测试，打包到应用商店，消息推送等都会用到开发者证书。一开始接触苹果严密的证书申请流程难免都会觉得晦涩难懂，经过多次证书制作后才能慢慢明白其中每个步骤的意义。总结如下几个关键步骤得理解，方便以后复习。</p>
<h3 id="1-创建certificate文件"><em>1.创建certificate文件</em></h3><p>需要先在电脑的keychain中请求带有公钥和私钥对的密钥。同时生成CRS文件<br>其中email address 和common name 可以随意填写，因为是保存到磁盘而不是通过邮件发送</p>
<h3 id="2-安装根证书"><em>2.安装根证书</em></h3><p>在开发者中心下载，文件名为:AppleWWDRCA.cer<a id="more"></a><br>双击后xcode自动安装</p>
<h3 id="3-请求开发者证书"><em>3.请求开发者证书</em></h3><p>生成证书时会选择一个CRS文件，即第一步生成密钥对的同时生成的文件。<br>生成后下载下来备用</p>
<h3 id="4-创建Identifier"><em>4.创建Identifier</em></h3><p>即创建应用bundle id 对应的app id ,如果是给所有的应用都可以做真机调试，可以用通配符*<br>创建的app id 在后面的创建Provisioning Profiles 会选择到。</p>
<h3 id="5-添加自己的设备uuid"><em>5.添加自己的设备uuid</em></h3><h3 id="6-创建Provisioning_Profiles"><em>6.创建Provisioning Profiles</em></h3><p>选择Development 或Distribution 创建规定文档，用于安装到手机上标示在哪台电脑对应的哪个app在哪台手机上做真机调试。<br>如果想创建的证书在多台电脑上共有，需要到处keychain中证书栏对应的证书下得私钥文件为p12文件，同时下载cer和provisioning Profiles共三个文件。安装到需要调试的电脑上，一切工作到此结束。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在苹果开发中避免不了的要和开发者账号打交道，在XCode7.0之前要在真机进行测试，打包到应用商店，消息推送等都会用到开发者证书。一开始接触苹果严密的证书申请流程难免都会觉得晦涩难懂，经过多次证书制作后才能慢慢明白其中每个步骤的意义。总结如下几个关键步骤得理解，方便以后复习。</p>
<h3 id="1-创建certificate文件"><em>1.创建certificate文件</em></h3><p>需要先在电脑的keychain中请求带有公钥和私钥对的密钥。同时生成CRS文件<br>其中email address 和common name 可以随意填写，因为是保存到磁盘而不是通过邮件发送</p>
<h3 id="2-安装根证书"><em>2.安装根证书</em></h3><p>在开发者中心下载，文件名为:AppleWWDRCA.cer]]>
    
    </summary>
    
      <category term="iOS" scheme="http://blog.yinuolu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OC计算字节长度]]></title>
    <link href="http://blog.yinuolu.com/2015/11/12/OC%E8%AE%A1%E7%AE%97%E5%AD%97%E8%8A%82%E9%95%BF%E5%BA%A6/"/>
    <id>http://blog.yinuolu.com/2015/11/12/OC计算字节长度/</id>
    <published>2015-11-12T13:28:40.000Z</published>
    <updated>2015-11-12T14:22:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="对于文本框的输入字数限制">对于文本框的输入字数限制</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>) unicodeLengthOfString: (<span class="built_in">NSString</span> *) text &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> asciiLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unichar</span> uc = [text characterAtIndex: i];</span><br><span class="line"></span><br><span class="line">        asciiLength += isascii(uc) ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> asciiLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="对于文本框的输入字数限制">对于文本框的输入字数限制</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><b]]>
    </summary>
    
      <category term="objective-c" scheme="http://blog.yinuolu.com/tags/objective-c/"/>
    
      <category term="iOS" scheme="http://blog.yinuolu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenSSl简介-记录笔记]]></title>
    <link href="http://blog.yinuolu.com/2015/11/12/OpenSSl%E7%AE%80%E4%BB%8B-%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.yinuolu.com/2015/11/12/OpenSSl简介-记录笔记/</id>
    <published>2015-11-12T09:58:46.000Z</published>
    <updated>2015-11-12T10:05:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="OpenSSl_简介">OpenSSl 简介</h2><p>公司一个项目要进行交易数据传输,因为这个项目银行那边也是刚刚开始启动,所有的支持只有一个传输字段的说明文档,好吧,总的有人做事不是嘛,于是接口开发正式展开,第一步的难点就是加密解密,我选择使用OpenSSL.<br>OpenSSL初接触的人恐怕最难的在于先理解各种概念</p>
<h3 id="公钥/私钥/签名/验证签名/加密/解密/非对称加密">公钥/私钥/签名/验证签名/加密/解密/非对称加密</h3><p>　　我们一般的加密是用一个密码加密文件,然后解密也用同样的密码.这很好理解,这个是对称加密.而有些加密时,加密用的一个密码,而解密用另外一组密码,这个叫非对称加密,意思就是加密解密的密码不一样.初次接触的人恐怕无论如何都理解不了.其实这是数学上的一个素数积求因子的原理的应用,如果你一定要搞懂,百度有大把大把的资料可以看,其结果就是用这一组密钥中的一个来加密数据,可以用另一个解开.是的没错,公钥和私钥都可以用来加密数据,相反用另一个解开,公钥加密数据,然后私钥解密的情况被称为加密解密,私钥加密数据,公钥解密一般被称为签名和验证签名.<a id="more"></a><br>　　因为公钥加密的数据只有它相对应的私钥可以解开,所以你可以把公钥给人和人,让他加密他想要传送给你的数据,这个数据只有到了有私钥的你这里,才可以解开成有用的数据,其他人就是得到了,也看懂内容.同理,如果你用你的私钥对数据进行签名,那这个数据就只有配对的公钥可以解开,有这个私钥的只有你,所以如果配对的公钥解开了数据,就说明这数据是你发的,相反,则不是.这个被称为签名.<br>　　实际应用中,一般都是和对方交换公钥,然后你要发给对方的数据,用他的公钥加密,他得到后用他的私钥解密,他要发给你的数据,用你的公钥加密,你得到后用你的私钥解密,这样最大程度保证了安全性.</p>
<h3 id="RSA/DSA/SHA/MD5">RSA/DSA/SHA/MD5</h3><p>　　非对称加密的算法有很多,比较著名的有RSA/DSA ,不同的是RSA可以用于加/解密,也可以用于签名验签,DSA则只能用于签名.至于SHA则是一种和md5相同的算法,它不是用于加密解密或者签名的,它被称为摘要算法.就是通过一种算法,依据数据内容生成一种固定长度的摘要,这串摘要值与原数据存在对应关系,就是原数据会生成这个摘要,但是,这个摘要是不能还原成原数据的,嗯….,正常情况下是这样的,这个算法起的作用就是,如果你把原数据修改一点点,那么生成的摘要都会不同,传输过程中把原数据给你再给你一个摘要,你把得到的原数据同样做一次摘要算法,与给你的摘要相比较就可以知道这个数据有没有在传输过程中被修改了.<br>　　实际应用过程中,因为需要加密的数据可能会很大,进行加密费时费力,所以一般都会把原数据先进行摘要,然后对这个摘要值进行加密,将原数据的明文和加密后的摘要值一起传给你.这样你解开加密后的摘要值,再和你得到的数据进行的摘要值对应一下就可以知道数据有没有被修改了,而且,因为私钥只有你有,只有你能解密摘要值,所以别人就算把原数据做了修改,然后生成一个假的摘要给你也是不行的,你这边用密钥也根本解不开.</p>
<h3 id="CA/PEM/DER/X509/PKCS">CA/PEM/DER/X509/PKCS</h3><p>　　一般的公钥不会用明文传输给别人的,正常情况下都会生成一个文件,这个文件就是公钥文件,然后这个文件可以交给其他人用于加密,但是传输过程中如果有人恶意破坏,将你的公钥换成了他的公钥,然后得到公钥的一方加密数据,不是他就可以用他自己的密钥解密看到数据了吗,为了解决这个问题,需要一个公证方来做这个事,任何人都可以找它来确认公钥是谁发的.这就是CA,CA确认公钥的原理也很简单,它将它自己的公钥发布给所有人,然后一个想要发布自己公钥的人可以将自己的公钥和一些身份信息发给CA,CA用自己的密钥进行加密,这里也可以称为签名.然后这个包含了你的公钥和你的信息的文件就可以称为证书文件了.这样一来所有得到一些公钥文件的人,通过CA的公钥解密了文件,如果正常解密那么机密后里面的信息一定是真的,因为加密方只可能是CA,其他人没它的密钥啊.这样你解开公钥文件,看看里面的信息就知道这个是不是那个你需要用来加密的公钥了.<br>　　实际应用中,一般人都不会找CA去签名,因为那是收钱的,所以可以自己做一个自签名的证书文件,就是自己生成一对密钥,然后再用自己生成的另外一对密钥对这对密钥进行签名,这个只用于真正需要签名证书的人,普通的加密解密数据,直接用公钥和私钥来做就可以了.<br>　　密钥文件的格式用OpenSSL生成的就只有PEM和DER两种格式,PEM的是将密钥用base64编码表示出来的,直接打开你能看到一串的英文字母,DER格式是二进制的密钥文件,直接打开,你可以看到……..你什么也看不懂!.X509是通用的证书文件格式定义.pkcs的一系列标准是指定的存放密钥的文件标准,你只要知道PEM DER X509 PKCS这几种格式是可以互相转化的.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="OpenSSl_简介">OpenSSl 简介</h2><p>公司一个项目要进行交易数据传输,因为这个项目银行那边也是刚刚开始启动,所有的支持只有一个传输字段的说明文档,好吧,总的有人做事不是嘛,于是接口开发正式展开,第一步的难点就是加密解密,我选择使用OpenSSL.<br>OpenSSL初接触的人恐怕最难的在于先理解各种概念</p>
<h3 id="公钥/私钥/签名/验证签名/加密/解密/非对称加密">公钥/私钥/签名/验证签名/加密/解密/非对称加密</h3><p>　　我们一般的加密是用一个密码加密文件,然后解密也用同样的密码.这很好理解,这个是对称加密.而有些加密时,加密用的一个密码,而解密用另外一组密码,这个叫非对称加密,意思就是加密解密的密码不一样.初次接触的人恐怕无论如何都理解不了.其实这是数学上的一个素数积求因子的原理的应用,如果你一定要搞懂,百度有大把大把的资料可以看,其结果就是用这一组密钥中的一个来加密数据,可以用另一个解开.是的没错,公钥和私钥都可以用来加密数据,相反用另一个解开,公钥加密数据,然后私钥解密的情况被称为加密解密,私钥加密数据,公钥解密一般被称为签名和验证签名.]]>
    
    </summary>
    
      <category term="OpenSSL" scheme="http://blog.yinuolu.com/tags/OpenSSL/"/>
    
      <category term="随笔" scheme="http://blog.yinuolu.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="OpenSSL" scheme="http://blog.yinuolu.com/categories/OpenSSL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建hexo遇到过得坑]]></title>
    <link href="http://blog.yinuolu.com/2015/11/11/%E6%90%AD%E5%BB%BAhexo%E9%81%87%E5%88%B0%E8%BF%87%E5%BE%97%E5%9D%91/"/>
    <id>http://blog.yinuolu.com/2015/11/11/搭建hexo遇到过得坑/</id>
    <published>2015-11-11T14:29:02.000Z</published>
    <updated>2015-11-12T09:29:06.000Z</updated>
    <content type="html"><![CDATA[<!--toc-->
<ul>
<li>1.<a href="#mou1">简述安装的主要步骤</a><ul>
<li>1.1安装homebrew</li>
<li>1.2安装node.js</li>
<li>1.3安装hexo</li>
</ul>
</li>
<li>2.<a href="#mou2">踏过的坑点</a></li>
<li>3.<a href="#mou3">解析到自定义域名</a></li>
</ul>
<!--tocstop-->
<p><a name="mou1"></a></p>
<h2 id="1-简述安装的主要步骤"><strong><em> 1.简述安装的主要步骤</em></strong></h2><h3 id="1-安装homebrew">1.安装homebrew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2-安装node-js">2.安装node.js</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure>
<h3 id="3-安装hexo">3.安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo</span></span><br></pre></td></tr></table></figure>
<p><a name="mou2"></a></p>
<h2 id="2-踏过的坑点"><strong><em> 2.踏过的坑点 </em></strong></h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo d #始终失败</span><br><span class="line"><span class="keyword">error: </span>ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>查了网上资料需要先安装deploy插件执行以下命令：<br><a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></p>
<p>但是发现没办法安装，猜测是墙的原因，于是修改registry:</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">registry</span>=<span class="string">"http://r.cnpmjs.org"</span></span><br></pre></td></tr></table></figure>
<p>并且使用sudo权限重新安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></p>
<p>终于成功安装deploy插件<br>继续<br>执行：hexo g &amp;&amp; hexo d<br>成功部署到github</p>
<h4 id="备注"><strong><em>备注</em></strong></h4><p>此处还可能出现一个错误，当xcode更新后Application的Xcode.app的名字被更改，如：Xcode5.app;<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br><span class="line">xcrun: <span class="keyword">error</span>: active developer path (<span class="string">"/Users/apple/Desktop/Xcode5.app/Contents/Developer"</span>) <span class="keyword">does</span> <span class="keyword">not</span> exist ...</span><br></pre></td></tr></table></figure></p>
<p>原因是git命令时找不到路径，解决方法：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo xcode-select -<span class="keyword">switch</span> <span class="regexp">/Applications/</span>Xcode5.app<span class="regexp">/Contents/</span>Developer</span><br></pre></td></tr></table></figure></p>
<p>注：上面的xcode5.app根据情况，因为我的xcode安装之后，改了名字叫xcode5所以这里是，xcodee5.app如果你没有攺，就是xcode.app<br><a name="mou3"></a></p>
<h2 id="3-解析到自定义域名"><strong><em> 3.解析到自定义域名 </em></strong></h2><p>推荐用DSNPod<br>先到购买域名的服务商去修改dns为DNSPod的对应DNS（这步很重要）<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS1: f1g1ns1<span class="selector-class">.dnspod</span><span class="selector-class">.net</span>  </span><br><span class="line">DNS2: f1g1ns2<span class="selector-class">.dnspod</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure></p>
<h3 id="一级域名：">一级域名：</h3><p>在dnspod控制台，设置主机记录@，类型A，到IP 192.30.252.153。</p>
<h3 id="二级域名：">二级域名：</h3><p>在dnspod控制台，我们要做3步设置:<br>1.设置主机记录github，类型A，到IP 199.27.76.133<br>2.设置主机记录yourname.github.io，类型CNAME，到github.yourname.com.<br>3.设置主机记录blog，类型CNAME，到 yourname.github.io</p>
<p><strong><em>最后需要注意的是：DNS修改后不会马上生效，需要做的就是耐心等待</em></strong></p>
<h3 id="在github项目中，新建一个文件CNAME，文件中写出你要绑定的域名">在github项目中，新建一个文件CNAME，文件中写出你要绑定的域名</h3><p>CNAME:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog<span class="selector-class">.yinuolu</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p>
<h3 id="修改主题：">修改主题：</h3><p>查看主题：<a href="https://github.com/tommy351/hexo/wiki/Themes" target="_blank" rel="noopener">点这里</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">以pacman为例</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/A-limon/pacman.git themes/pacman</span></span><br></pre></td></tr></table></figure></p>
<p>编辑文件_config.yml，找到theme一行，改成 theme: pacman</p>
<h3 id="更新主题">更新主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/pacman</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<!--toc-->
<ul>
<li>1.<a href="#mou1">简述安装的主要步骤</a><ul>
<li>1.1安装homebrew</li>
<li>1.2安装node.js</li>
<li>1.3安装hexo</li>
</ul>
</li>
<li>2.<a href="#mou2">踏过的坑点</a></li>
<li>3.<a href="#mou3">解析到自定义域名</a></li>
</ul>
<!--tocstop-->
<p><a name="mou1"></a></p>
<h2 id="1-简述安装的主要步骤"><strong><em> 1.简述安装的主要步骤</em></strong></h2><h3 id="1-安装homebrew">1.安装homebrew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2-安装node-js">2.安装node.js</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install <span class="keyword">node</span><span class="title"></span></span><br></pre></td></tr></table></figure>
<h3 id="3-安装hexo">3.安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo</span></span><br></pre></td></tr></table></figure>
<p><a name="mou2"></a></p>
<h2 id="2-踏过的坑点"><strong><em> 2.踏过的坑点 </em></strong></h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g &amp;&amp; hexo d #始终失败</span><br><span class="line"><span class="keyword">error: </span>ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>查了网上资料需要先安装deploy插件执行以下命令：<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://blog.yinuolu.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="hexo" scheme="http://blog.yinuolu.com/tags/hexo/"/>
    
      <category term="日记" scheme="http://blog.yinuolu.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="Hexo" scheme="http://blog.yinuolu.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://blog.yinuolu.com/2015/08/01/hello-world/"/>
    <id>http://blog.yinuolu.com/2015/08/01/hello-world/</id>
    <published>2015-08-01T12:20:02.000Z</published>
    <updated>2015-11-12T08:00:12.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://blog.yinuolu.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Hexo" scheme="http://blog.yinuolu.com/categories/Hexo/"/>
    
  </entry>
  
</feed>